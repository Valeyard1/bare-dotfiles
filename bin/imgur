#!/bin/sh

# Imgur script by Bart Nagel <bart@tremby.net>
# Improvements by Tino Sino <robottinosino@gmail.com>
# POSIX SH conversion by William Maxwell <thinkabit.ukim@gmail.com>
# Version 6 or more
# I release this into the public domain. Do with it what you will.
# The latest version can be found at https://github.com/tremby/imgur.sh
#
# depends: curl, xclip

# API Key provided by Bart;
# replace with your own or specify yours as IMGUR_CLIENT_ID envionment variable
# to avoid limits
default_client_id=c9a6efb3d7932fd
client_id="${IMGUR_CLIENT_ID:=$default_client_id}"

# Function to output usage instructions
usage() {
  echo "Usage: $(basename "$0") [<filename> [...]]" >&2
  echo "Upload images to imgur and output their new URLs to stdout. Each one's" >&2
  echo "delete page is output to stderr between the view URLs." >&2
  echo "A filename can be - to read from stdin. If no filename is given, stdin is read." >&2
  echo "If xclip is available, the URLs are put on the X selection for" >&2
  echo "easy pasting." >&2
}

# Check arguments
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  usage
  exit 0
elif [ $# -eq 0 ]; then
  echo "No file specified; reading from stdin" >&2
  exec "$0" -
fi

# Check curl is available
hash curl >/dev/null 2>&1 || {
  echo "Couldn't find curl, which is required." >&2
  exit 17
}

clip=""
errors=false

# Loop through arguments
while [ $# -gt 0 ]; do
  file="$1"
  shift

  # Check file exists
  if [ "$file" != "-" ] && [ ! -f "$file" ]; then
    printf "%s\\n" "File '$file' doesn't exist; skipping" >&2
    errors=true
    continue
  fi

  # Upload the image
  if ! response=$(curl -s -H "Authorization: Client-ID $client_id" -H "Expect: " -F "image=@$file" https://api.imgur.com/3/image.xml) 2>/dev/null
  then
    echo "Upload failed" >&2
    errors=true
    continue
  elif printf "%s\\n" "$response" | grep -q 'success="0"'; then
    echo "Error message from imgur:" >&2
    msg="${response##*<error>}"
    printf "%s\\n" "${msg%%</error>*}" >&2
    errors=true
    continue
  fi

  # Parse the response and output our stuff
  url="${response##*<link>}"
  url="${url%%</link>*}"
  delete_hash="${response##*<deletehash>}"
  delete_hash="${delete_hash%%</deletehash>*}"
  url=$(printf '%s' "$url" | sed -e 's/^http:/https:/')
  printf "%s\\n" "$url" >&2
  printf "%s\\n" "Delete page: https://imgur.com/delete/$delete_hash" >&2

  # Append the URL to a string so we can put them all on the clipboard later
  clip="$url"
  if [ $# -gt 0 ]; then
    clip="$(printf '%b_' ' \n')"; clip="${clip%_}"
  fi
done

# Put the URLs on the clipboard if we can
  printf "%s" "$clip" | xclip -selection clipboard

if $errors; then
  exit 1
fi


